use findMyRestaurant
1. Crud
1.1 â€“ Write a MongoDB query to display all the documents in the
restaurant collection.
db.resturants.find()
//
1.2 - Write a MongoDB query to display all restaurants that have a
specific cuisine
db.resturants.find({cuisine_type: "italian"})
//
1.3 - Write a MongoDb query that displays only kosher
restaurants
// db.resturants.find({kosher_halal: "true"})
1.4 - Write a MongoDb query that displays only specific cities
restaurants
db.resturants.find({"address.city": "haifa"})
//
1.5 - Write a MongoDb query to display a specific restaurants
address
db.resturants.find({"address.city": "haifa"},{address:1 }
// - or -
db.resturants.find({resturant_name: 'neopolitan'},{address:1 })
//
1.6 - Write a MongoDB query to display specific restaurants
coordinates
db.resturants.find({resturant_name: 'neopolitan'},{"address.coordinates":1 })
//
1.7. - Write a MongoDB query that should display all restaurants in
ascending order by restaurant name.
db.resturants.find().pretty().sort({resturant_name:-1})
//
1.8 - Write a MongoDB query that should display all restaurants in
ascending order by city names.
db.resturants.find().pretty().sort({"address.city":1}) 
//
1.9 - Update a specific restaurant's name
db.resturants.updateOne({resturant_name: 'mesa'},{$set:{resturant_name:"Mesaaa"}})
//
1.10 - Update a specific restaurant by adding a new review.
db.resturants.updateOne({_id: ObjectId("63962c6bdaa7bc2ec3007c48")},{$push:{reviews:{ date: '2022-10-11', score: '3.8' }}})
//
1.11 - Update all restaurants to be kosher
db.resturants.updateMany({kosher:false},{$set:{kosher:true}})
//
1.12 - Delete a specific restaurant
db.resturants.deleteOne({_id: ObjectId("63962c6bdaa7bc2ec3007c48")})
//
1.13 - Delete all restaurants
db.resturants.deleteMany({resturant_name:{$exists:true}})
//
2. forEach Queries
use the forEach cursor method to query the following:
2.1 - Write a MongoDB query to print all restaurant names.
db.resturants.find().forEach(function(myDoc) {print("resturant name: " + myDoc.resturant_name)})
//
2.2 - Write a MongoDB query to print all restaurant cities
db.resturants.find().forEach(function(myDoc) {print("resturant city: " + myDoc.address.city)})
//
2.3 - Write a MongoDb query to print all restaurant coordinates
db.resturants.find().forEach(function(myDoc) {print("resturant coordinates: " + myDoc.address.coordinates)})
3. Advanced Queries
3.1 - Query for restaurant names that start with a specific
alphabet
db.resturants.find({resturant_name: /^m/})
//
3.2 - Query how many documents you have from the restaurant
collection.
db.resturants.find().count()
//
3.3 - Write a MongoDb query to get restaurants that include
reviews from a specific date
db.resturants.find({"reviews.date":"2022-09-09"})
//
db.resturants.aggregate([ { $project: { scoreAvg: { $avg: "$reviews.score" } } }
4. Aggregation operations
use the aggregation framework to query the following:
4.1- Write a mongoDb query to display all restaurants average
score.
db.resturants.aggregate([ { $project: { scoreAvg: { $avg: "$reviews.score" } } }
//
4.2 - Write a MongoDB query to display a specific restaurant
average score
db.resturants.aggregate([ { $project: { scoreAvg: { $avg: "$reviews.score" } } }
db.resturants.aggregate([ { $project: {_id: ObjectId("63964909daa7bc2ec3007c5b"), scoreAvg: { $avg: "$reviews.score" } } }
db.resturants.aggregate([{$group: {resturant_name: 'neopolitan',scoreAvg: { $avg: "$reviews.score" },},},]);
db.resturants.aggregate([
  {
    $group: {
      _id: '$item',
      averageQty: { $avg: '$quantity' },
    },
  },
]);
db.resturants.aggregate([{$group: {_id:'$id',averageAmount:{ $avg: "$reviews.score" }}}},{$match: {city:{'tel-aviv'}}}])
db.resturants.aggregate(
   [
     {
       $group:
         {
           _id: "$item",
           avgAmount: { $avg: { $multiply: [ "$price", "$quantity" ] } },
           avgQuantity: { $avg: "$quantity" }
         }
     }
   ]
)